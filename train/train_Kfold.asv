
clc;
clear all;
close all;


disp(['*************************************************************'])
disp(['TEM CERTEZA QUE DESEJA COMPILAR O CÓDIGO?????'])
disp(['SE ESTIVER FAZENDO UM TESTE, CONFIRA SE NEHUMA VARIÁVEL IMPORTANTE'... 
     'SERÁ SOBREPOSTA DE FORMA INDESEJADA'])
disp(['CONFIRA OS SAVE!!!!'])
disp(['*************************************************************'])
disp('Se ta tudo certo continue entre com o número do banco, caso contrário (ctrl+c).');
banco = input('Banco de treino B:S (1), B:N (2), B:B (3),B:SN (4),B:SB (5),B:NB (6) e B:SNB (7) = ');

disp([''])
tic
if *banco == 1)
    form = '_orig';
elseif (banco == 2)
    form = '_grav';
elseif (banco == 3)
    form = '_r30';
elseif (banco == 4)
    form = '_MSN';   
elseif (banco == 5)
    form = '_MSB';
elseif (banco == 6)
    form = '_MNB';
elseif (banco == 7)
    form = '_MSNB';
elseif (banco == 8)
    form = '_MF';
end    
       


% Solve an Input-Output Fitting problem with a Neural Network

% This script assumes these variables are defined:
%
%   entradas - input data.
%   saida - target data.
if banco > 0
    name_saida = ['saida' form '.mat'];
    name_entrada = ['entradas' form '.mat'];
end

load(name_saida)
load(name_entrada)
x1 = entradas';
t1 = saida';
MM=100;
k=7;
t_k=[];
x_k =[];

[Train_ind, Val_ind, Test_ind, indices, t, x] = My_Kfold(k, t1, x1);

tiptrain = 'trainlm';


V_neuro = []; %vetor com os neuronios
V_EPM = []; %vetor com o erro médio percentual por N
V_DP_k = []; %vetor com o desvio padrão do erro por N
V_EPM_m = [];
V_EPM_k = [];

for j = 2:5
    %variando o número de neurônios
    
    EPM_k = []; %vetor com o erro médio percentual da validaçao por k
    
    ME=100;
    for i = 1:k %variando o banco de dados para a validação
        
      EPM_v = []; %vetor com o erro médio percentual da validaçao por u
      DP_v = []; %vetor com o desvio padrão do erro da validação por u
        t_k =[t(Train_ind(i,:)) t(Val_ind(i,:)) t(Test_ind(i,:))];
                for ent = 1:25
                    x_k(ent,:) = [x(ent,(Train_ind(i,:))) x(ent,(Val_ind(i,:))) x(ent,(Test_ind(i,:)))];
                end

            for u=1:2 % sorteio de novos pesos
                
                hiddenLayerSize =j; %número de Neurônios 
                trainFcn = tiptrain ;  % Tipo de treinamento  .
                net = fitnet(hiddenLayerSize,trainFcn); %Criando a rede
                net.input.processFcns = {'removeconstantrows','mapminmax'}; %mapstd
                net.output.processFcns = {'removeconstantrows','mapminmax'};
                net.output.processFcns.ymin = 0;

                net.divideFcn = 'divideblock'; %divisão do banco de dados
                %divisão dos indices para cada etapa

%                 net.layers{2}.transferFcn = 'poslin'; 
%                 net.layers{1}.transferFcn = 'logsig';
                net.divideParam.trainRatio = 71.1428/100; 
                net.divideParam.valRatio = 14.2857/100;
                net.divideParam.testRatio = 14.2857/100; 


                net.performFcn = 'mse';  % Mean Squared Error
                net.trainParam.lr = 0.0001;
                net.trainParam.epochs = 100000;
                net.trainParam.max_fail = 6;
                %%%%% MUITO IMPORTANTE ESSE COMANDO TIRA AQUELA JANELA CHATA
                net.trainParam.showWindow = false;
                net.trainParam.showCommandLine = false;
 

                [net,tr] = train(net,x_k,t_k);
                testTargets = t_k .* tr.testMask{1};
                InTest = tr.testInd;


                y = net(x_k);
                Ytest = zeros(1,length(InTest));
                Ydtest = zeros(1,length(InTest));
                Etest = zeros(1,length(InTest));


                for s = 1:length(InTest)

                    Ytest(s) = y(InTest(s)); %identificando os valores encontrados
                    Ydtest(s) = t_k(InTest(s)); %identificando os valores desejados
                    Etest(s) = Ydtest(s)- Ytest(s); %calculando o erro 
                end

                EPA = abs(Etest./Ydtest)*100; %erro percentual absoluto
                EPM = sum(EPA)/length(EPA); %erro percentual médio

                EPM_v  = [EPM_v  EPM];
 
                if (EPM < ME)
                  
                    net_top = net;
                    tr_top = tr;
                    saida = t_k;
                    entradas = x_k;
                    EPMprint = EPM;
                    Kprint = i;
                    Nprint = j;
                    
                    ME = EPM;
                end
           
                
            end
        
        EPM_k = [EPM_k  min(EPM_v)];
        
        

    end
    
    disp(['EPM = ' num2str(EPMprint) ' | K = ' num2str(Kprint)  ...
            ' | N = ' num2str(Nprint) ]) 
    disp(['-'])
        
    EPM_k_M = sum(EPM_k)/k;
    
      if (EPM_k_M < MM)
        namenet = ['net_K'  form '.mat'];
        nametr = ['tr_K'  form '.mat'];
        name_t = ['saida_K'  form '.mat'];
        name_x = ['entradas_K'  form '.mat'];
        net = net_top;
        tr = tr_top;
        save (namenet, 'net')
        save (nametr, 'tr')
        save (name_t, 'saida')
        save (name_x, 'entradas')
        disp(['EPMmédio : ' num2str(EPM_k_M) '   N = ' num2str(j)])
        disp(['-----------------------------'])
        MM = EPM_k_M;
      end
    V_neuro = [V_neuro j];
    V_DP_k = [V_DP_k  std(EPM_k)]; %salva os valores de DP para cada neuronio
    V_EPM = [V_EPM  EPM_k_M]; %salva o valor de EPM para cada neuronio
    V_EPM_m = [V_EPM_m min(EPM_k)];
    V_EPM_k = [V_EPM_k ;EPM_k];
end


name_V_neuro = ['V_neuro' form '.mat'];
name_V_DP_k = ['V_DP_k' form '.mat'];
name_V_EPM_k = ['V_EPM_k' form '.mat']; 
name_V_EPM = ['V_EPM' form '.mat'];
name_V_EPM_m = ['V_EPM_m' form '.mat'];

save(name_V_neuro, 'V_neuro');
save(name_V_DP_k,'V_DP_k');
save(name_V_EPM_k,'V_EPM_k');
save(name_V_EPM,'V_EPM');
save(name_V_EPM_m,'V_EPM_m');

save trainFcn.mat trainFcn ;
disp('Se você está vendo essa mensagem, fique feliz :], o treinamento acabou!!!!!!!!!!!')
disp(['Ele só durou ' num2str(toc/3600) ' horas'])

%%

% clc;
% clear all;
% close all;
disp(['*************************************************************'])
banco = input('Formato da músicas mp3 (1), gravado (2) ou completo (3) = ');

if (banco == 0)
    form = '_spec';
elseif (banco == 2)
    form = '_grav';
elseif (banco == 1)
    form = '_orig'; 
elseif (banco == 3)
    form = '_r30';
elseif (banco == 4)
    form = '_MSN';   
elseif (banco == 5)
    form = '_MSB';
elseif (banco == 6)
    form = '_MNB';
elseif (banco == 7)
    form = '_MSNB';
elseif (banco == 8)
    form = '_MF';

end 
    
       
name_V_neuro = ['V_neuro' form '.mat'];
name_V_DP_k = ['V_DP_k' form '.mat'];
name_V_EPM_k = ['V_EPM_k' form '.mat'];
name_V_EPM = ['V_EPM' form '.mat'];
name_V_EPM_m = ['V_EPM_m' form '.mat'];

load(name_V_neuro, 'V_neuro') ;
load(name_V_DP_k,'V_DP_k') ;
load(name_V_EPM_k,'V_EPM_k') ;
load(name_V_EPM,'V_EPM') ;
load(name_V_EPM_m,'V_EPM_m') ;
          

load('trainFcn.mat')


Best=min(V_EPM);
N_best = find(V_EPM==Best); 

figure1 = figure();
axes1 = axes('Parent',figure1);
hold(axes1,'on');
set(axes1,'FontSize',12);
hold on


plot(V_neuro,V_EPM,'k-s','LineWidth',1)
plot(V_neuro,V_EPM_m,'b-s','LineWidth',.5) 
plot(V_neuro(N_best),V_EPM(N_best),'r*','LineWidth',0.5)

str ={['N=' num2str(V_neuro(N_best))], ['EPM=' num2str(round(Best,3)), ...
char(177), num2str(round(V_DP_k(N_best),3))]};
n = find(str{2}=='.');
str{2}(n)= ',';
text([V_neuro(N_best),V_neuro(N_best)-7],[Best-0.05,(Best-0.13)],str,'Color','red')
% plot(G_EPM',V_neuro,'k-s''LineWidth',0.5)

xlabel('N° neurônios')
ylabel ('EPM (%)')
grid on 
grid minor
axis tight

ylim([4.3 6]);
legend('Médio', 'Mínimo')
namefig = ['R_Train' form ];
saveas(figure1,namefig,'epsc')



figure1 = figure();
axes1 = axes('Parent',figure1);
hold(axes1,'on');
set(axes1,'FontSize',12);
boxplot(V_EPM_k',V_neuro)
plot(V_EPM,'m*','LineWidth',1)

plot(N_best,V_EPM(N_best),'r*','LineWidth',0.5)
xlabel('N° neurônios')
ylabel ('EPM (%)')
grid on 

grid minor
axis tight
% 
%%  Analise dos resultados da RNA variando o número de neurônios 5.466
clc;
clear all;
close all;


disp(['*************************************************************'])
banco = input('Formato da músicas mp3 (1), gravado (2) ou completo (3) = ');
if (banco == 0)
    form = '_spec';
elseif (banco == 2)
    form = '_grav';
elseif (banco == 1)
    form = '_orig'; 
elseif (banco == 3)
    form = '_r30';
elseif (banco == 4)
    form = '_MSN';   
elseif (banco == 5)
    form = '_MSB';
elseif (banco == 6)
    form = '_MNB';
elseif (banco == 7)
    form = '_MSNB';
elseif (banco == 8)
    form = '_MF';

end
   
       
name_saida = ['saida_K' form '.mat'];
name_entrada = ['entradas_K' form '.mat'];
load(name_saida)
load(name_entrada)

x = entradas;
Yd = saida;

trainFcn = 'trainlm';

    
%Lendo a rede
tiptrain = 'trainlm';
namenet = ['net_K'  form];
nametr = ['tr_K' form];
load(namenet,'-mat')
load(nametr,'-mat')

Y = net(x);

%Identificando os valores de teste
InTest = tr.testInd;
Ytest = zeros(1,length(InTest));
Ydtest = zeros(1,length(InTest));
ERROtest = zeros(1,length(InTest));

for i = 1:length(InTest)
    
    Ytest(i) = Y(InTest(i)); %identificando os valores encontrados
    Ydtest(i) = Yd(InTest(i)); %identificando os valores desejados
    Etest(i) = Ydtest(i)-Ytest(i); %calculando o erro 
end

 
EA =  abs(Etest)*1000; %erro  absoluto
EAM = (sum(EA)/length(EA)); %erro  médio (ms)
EAMt = EAM*ones(1,length(EA));

EPA = abs(Etest./Ydtest)*100; %erro percentual absoluto
EPM = sum(EPA)/length(EPA); %erro percentual médio
EPMt = EPM*ones(1,length(EPA));

%%%%%%%%%%%%%%%%%%%% PLOT %%%%%%%%%%%%%%%%%

%%%%% SAIDA DA RNA %%%%%%%%%%%%%%%%%
figure1 = figure();
axes1 = axes('Parent',figure1);
hold(axes1,'on');
set(axes1,'FontSize',12);
hold on
plot (Ytest, 'ro','LineWidth',0.001)
plot(Ydtest, 'k.','LineWidth',1)
% plot (EA, 'm*','LineWidth',0.001)
% plot(EAMt, 'k','LineWidth',1)


% EA =  Etest*1000; %erro  absoluto (ms)
% EAM = (sum(EA)/length(EA))*1000 %erro  médio (ms)
% EAMv = 1000*EAM*ones(1,length(EAM));
legend('Saída da RNA','Saída esperada','Location','northwest')
xlabel('Amostras')
ylabel ('Compasso (s)')
% title('Saída em todas as fases')
grid on
grid minor
axis tight
namefig = ['R_Resposta' form ];
saveas(figure1,namefig,'epsc')


%%%% ERRO %%%%%%%%%%%%%%%%%%%%%%5
figure1 = figure();
axes1 = axes('Parent',figure1);
hold(axes1,'on');
set(axes1,'FontSize',12);
hold on
plot (EPA, 'm*','LineWidth',0.01)
plot(EPMt, 'b','LineWidth',0.1)
legend('EPA','EPM')
xlabel('Amostras')
ylabel ('Erro(%)')
% title('Saída em todas as fases')
grid on
grid minor
axis tight
DP = std(EPA);
str =['EPM=' num2str(round(EPM,3)) char(177) num2str(round(DP,3))];
n = 0;
n = find(str=='.');
str(n) = ',';
x = [0.09*EPM,0.1*EPM];
y = [0.09*EPM,1.5*(EPM/(max(EPA)-min(EPA)))];
text(30,EPM+(max(EPA)/100)*EPM,str,'BackgroundColor','white')
namefig = ['R_EPM' form ];
saveas(figure1,namefig,'epsc')
disp(['Erro Médio : ' num2str(EPM)])

disp(['Limites :'  num2str(minmax(Yd))])




